# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpcFiles.aiServer_pb2 as aiServer__pb2


class AIModelServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.processInstance = channel.unary_unary(
                '/ModelServer.v1.AIModelServer/processInstance',
                request_serializer=aiServer__pb2.RequestExample.SerializeToString,
                response_deserializer=aiServer__pb2.status.FromString,
                )
        self.ping = channel.unary_unary(
                '/ModelServer.v1.AIModelServer/ping',
                request_serializer=aiServer__pb2.pingMsg.SerializeToString,
                response_deserializer=aiServer__pb2.status.FromString,
                )


class AIModelServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def processInstance(self, request, context):
        """A request to run the model on an instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Ping the server to check if it's alive.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIModelServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'processInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.processInstance,
                    request_deserializer=aiServer__pb2.RequestExample.FromString,
                    response_serializer=aiServer__pb2.status.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=aiServer__pb2.pingMsg.FromString,
                    response_serializer=aiServer__pb2.status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelServer.v1.AIModelServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AIModelServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def processInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelServer.v1.AIModelServer/processInstance',
            aiServer__pb2.RequestExample.SerializeToString,
            aiServer__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelServer.v1.AIModelServer/ping',
            aiServer__pb2.pingMsg.SerializeToString,
            aiServer__pb2.status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
